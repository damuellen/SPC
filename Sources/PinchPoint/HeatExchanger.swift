// SPDX-License-Identifier: Apache-2.0
//
// (C) Copyright 2016 - 2023
// Daniel MÃ¼llenborn, TSK Flagsol Engineering

import Libc
import Utilities

/// Represents a heat exchanger with various properties.
struct HeatExchanger: Codable {
  /// The mass flow properties for the heat exchanger.
  var massFlow = MassFlow()
  /// The temperature properties for the heat exchanger.
  var temperature = Temperatures()
  /// The enthalpy properties for the heat exchanger.
  var enthalpy = Enthalpy()
  /// The pressure properties for the heat exchanger.
  var pressure = Pressure()
  /// The power generated by the heat exchanger.
  var power: Double = 0.0

  /// The change in enthalpy of the heat transfer fluid in the heat exchanger.
  var htfEnthalpyChange: Double { enthalpy.htf.inlet - enthalpy.htf.outlet }

  /// The change in enthalpy of the working substance in the heat exchanger.
  var wsEnthalpyChange: Double { enthalpy.ws.outlet - enthalpy.ws.inlet }
}

/// Represents a connection between two properties of the heat exchanger.
struct Connection<T: Codable>: Codable {
  var inlet: T
  var outlet: T
}

/// Extensions to HeatExchanger for nested types.
extension HeatExchanger {
  /// Represents the mass flow properties in the heat exchanger.
  struct MassFlow: Codable {
    var htf: Double = 0
    var ws: Connection = .init(inlet: 0.0, outlet: 0.0)
  }

  /// Represents the enthalpy properties in the heat exchanger.
  struct Enthalpy: Codable {
    var htf: Connection = .init(inlet: 0.0, outlet: 0.0)
    var ws: Connection = .init(inlet: 0.0, outlet: 0.0)
  }

  /// Represents the pressure properties in the heat exchanger.
  struct Pressure: Codable {
    var ws: Connection = .init(inlet: 0.0, outlet: 0.0)
  }

  /// Represents the temperature properties in the heat exchanger.
  struct Temperatures: Codable {
    var htf: Connection<Temperature> = .init(inlet: 0.0, outlet: 0.0)
    var ws: Connection<Temperature> = .init(inlet: 0.0, outlet: 0.0)
  }
}

/// Represents the parameters for the heat exchanger calculation.
public struct HeatExchangerParameter: Codable {
  /// Difference between evaporation temperature and heat transfer fluid outlet temperature.
  public var temperatureDifferenceHTF: Double
  /// Difference between evaporation temperature and water inlet temperature.
  public var temperatureDifferenceWater: Double
  /// The steam quality.
  public var steamQuality: Double
  /// The required logarithmic mean temperature difference (LMTD) for the heat exchanger.
  public var requiredLMTD: Double
  /// The pressure drop properties for the heat exchanger.
  public var pressureDrop: PressureDrop

  /// Represents the pressure drop properties in the heat exchanger.
  public struct PressureDrop: Codable {
    public var economizer: Double
    public var economizer_steamGenerator: Double
    public var steamGenerator: Double
    public var steamGenerator_superHeater: Double
    public var superHeater: Double
    public var superHeater_turbine: Double
  }
}

/// Extensions to HeatExchangerParameter for default cases and initialization from an array of values.
extension HeatExchangerParameter {
  /// Initializes a HeatExchangerParameter from an array of values.
  ///
  /// - Parameter values: An array of 10 double values representing different parameters for the heat exchanger.
  public init?(values: [Double]) {
    guard values.count == 10 else { return nil }
    self.temperatureDifferenceHTF = values[0]
    self.temperatureDifferenceWater = values[1]

    self.pressureDrop = .init(
      economizer: values[2], economizer_steamGenerator: values[3],
      steamGenerator: values[4], steamGenerator_superHeater: values[5],
      superHeater: values[6], superHeater_turbine: values[7])

    self.steamQuality = values[8]
    self.requiredLMTD = values[9]
  }

  /// Default case 1 for HeatExchangerParameter.
  public static let case1 = HeatExchangerParameter(
    temperatureDifferenceHTF: 3.0, temperatureDifferenceWater: 3.0,
    steamQuality: 1.0, requiredLMTD: 10.5,
    pressureDrop: .init(
      economizer: 1.2, economizer_steamGenerator: 6.0, steamGenerator: 0.1,
      steamGenerator_superHeater: 0.2, superHeater: 0.5,
      superHeater_turbine: 1.5))

  /// Default case 2 for HeatExchangerParameter.
  public static let case2 = HeatExchangerParameter(
    temperatureDifferenceHTF: 3.0, temperatureDifferenceWater: 3.0,
    steamQuality: 1.0, requiredLMTD: 20.0,
    pressureDrop: .init(
      economizer: 1.0, economizer_steamGenerator: 0.2, steamGenerator: 0.55,
      steamGenerator_superHeater: 0.1, superHeater: 1.25,
      superHeater_turbine: 3.2))

  /// Default case 3 for HeatExchangerParameter.
  public static let case3 = HeatExchangerParameter(
    temperatureDifferenceHTF: 5.4, temperatureDifferenceWater: 3.0,
    steamQuality: 1.0, requiredLMTD: 22.0,
    pressureDrop: .init(
      economizer: 1.2, economizer_steamGenerator: 6.0, steamGenerator: 0.1,
      steamGenerator_superHeater: 0.2, superHeater: 0.5,
      superHeater_turbine: 1.5))
}

typealias Stream = HeatBalanceDiagram.Stream

extension HeatExchanger {
  var steamSide: (inlet: Stream, outlet: Stream) {
    (
      Stream(
        temperature.ws.inlet, pressure.ws.inlet, massFlow.ws.inlet,
        enthalpy.ws.inlet),
      Stream(
        temperature.ws.outlet, pressure.ws.outlet, massFlow.ws.outlet,
        enthalpy.ws.outlet)
    )
  }

  var htfSide: (inlet: Stream, outlet: Stream) {
    (
      Stream(temperature.htf.inlet, 0, massFlow.htf, enthalpy.htf.inlet),
      Stream(temperature.htf.outlet, 0, massFlow.htf, enthalpy.htf.outlet)
    )
  }

  var LMTD: String {
    String(
      format: "%.2f",
      ((temperature.htf.outlet.kelvin - temperature.ws.inlet.kelvin)
        - (temperature.htf.inlet.kelvin - temperature.ws.outlet.kelvin))
        / (log(
          (temperature.htf.outlet.kelvin - temperature.ws.inlet.kelvin)
            / (temperature.htf.inlet.kelvin - temperature.ws.outlet.kelvin))))
  }
}
