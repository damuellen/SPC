name: CI â€“ Windows

on: [push]

jobs:
  continuous-integration:

    runs-on: [windows-latest]

    steps:

      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-vsdevenv@master
        
      - name: Cache
        uses: actions/cache@v2.1.3
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: installer.exe
          # An explicit key for restoring and saving the cache
          key: swiftInstaller

      - name: Install swift-DEVELOPMENT-SNAPSHOT-2020-11-18-a
        run: |
          Install-Binary -Url "https://swift.org/builds/development/windows10/swift-DEVELOPMENT-SNAPSHOT-2020-11-18-a/swift-DEVELOPMENT-SNAPSHOT-2020-11-18-a-windows10.exe" -Name "installer.exe" -ArgumentList ("-q")

      - name: Set Environment Variables
        run: |
          echo "SDKROOT=C:\Library\Developer\Platforms\Windows.platform\Developer\SDKs\Windows.sdk" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "DEVELOPER_DIR=C:\Library\Developer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Adjust Paths
        run: |
          echo "C:\Library\Swift-development\bin;C:\Library\icu-67\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Library\Developer\Toolchains\unknown-Asserts-development.xctoolchain\usr\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
      - name: Install Supporting Files
        run: |
          Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
          Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"

      - name: "Install SQLite"
        shell: cmd
        run: .github/install-sqlite.bat

      - name: Build Release Mode
        run: swift build -v -c release

      - name: Strip Debug Info
        run: llvm-strip -S .build\x86_64-unknown-windows-msvc\release\SolarPerformanceCalc.exe

      - name: Compress binary using UPX
        run: |
          choco install upx
          upx --best .build\x86_64-unknown-windows-msvc\release\SolarPerformanceCalc.exe
          upx --best C:\Library\Swift-development\bin\*.dll
          upx --best C:\Library\icu-67\usr\bin\*.dll
          upx --best C:\Library\sqlite3\*.dll
          
      - name: "Upload exe" 
        uses: actions/upload-artifact@v2
        with:
          name: SPC-win32-x64
          path: .build\x86_64-unknown-windows-msvc\release\SolarPerformanceCalc.exe

      - name: "Upload dlls" 
        uses: actions/upload-artifact@v2
        with:
          name: DLLs-win32-x64
          path: |
            C:\Library\Swift-development\bin\*.dll
            C:\Library\icu-67\usr\bin\*.dll
            C:\Library\sqlite3\*.dll
